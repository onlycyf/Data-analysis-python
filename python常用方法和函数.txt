--------------------python连接hive数据库--------------------

使用impala连接

需要先安装python包
pip3 install pure-sasl
pip3 install sasl
pip3 install thrift_sasl
pip3 install impyla

from impyla import connect

def hive_sql():
    try:
        # 得到连接
        conn = connect(host='***', port=10000, auth_mechanism='PLAIN', user='root')
        # 得到句柄
        cursor = conn.cursor()
        # 执行查询
        cursor.execute('show databases')
        # 获取查询结果
        res = cursor.fetchall()
        # 打印结果信息
        print(res)
    except Exception as e:
        print(e)


---------------------requests--------------------

import requests

def re_post():
    # 1.Requests以form表单形式发送post请求
    url = 'http://httpbin.org/post'
    data = {'key1':'value1','key2':'value2'}
    r = requests.post(url,data)
    print(r)
    print(r.text)
    print(r.content)

    # 2.以json的形式提交表单
    url_json = 'http://httpbin.org/post'
    data_json = json.dumps({'key1':'value1','key2':'value2'})   #dumps：将python对象解码为json数据
    r_json = requests.post(url_json,data_json)
    print(r_json)
    print(r_json.text)
    print(r_json.content)

    # 3.以multipart的形式发送post
    url_mul = 'http://httpbin.org/post'
    files = {'file':open('E://report.txt','rb')}
    r = requests.post(url_mul,files=files)
    print(r)
    print(r.text)
    print(r.content)

时间戳和标准日期格式相互转化
import time

# 获取当前时间戳
time1 = int(time.time())
# 获取当前时间的python日期对象
time2 = time.localtime()
# 格式化时间戳(格式化的是日期对象) 年月日时分秒
time3 = time.strftime("%Y-%m-%d %H:%S:%M", time.localtime())

# 格式化日期格式的字符串
time_str = '2020-10-12'
time4 = time.strptime(time_str, '%Y-%m-%d')
time4 = time.mktime(time4)

print(time1)
print(time2)
print(time3)
print(time4)
# 1602468222
# time.struct_time(tm_year=2020, tm_mon=10, tm_mday=12, tm_hour=10, tm_min=3, tm_sec=42, tm_wday=0, tm_yday=286, tm_isdst=0)
# 2020-10-12 10:42:03
# 1602432000.0
---------------------------------linux screen的使用-------------------------
# 安装screen
sudo yum install screen
# 创建一个screen窗口
screen -S [name]
# 切换screen窗口
screen -r [name]
# 查看screen下所有窗口的id和名称
screen -ls
'''
There is a screen on:
    9208.kafka_log  (Detached)
1 Socket in /var/run/screen/S-data.
'''
# 删除一个screen窗口
screen -X -S [id] quit
# 如果当切换一个存在的screen是出现There is no screen to be resumed matching
# 先通过ps all查看后台进程，找到想要切换的screen，使用kill -9杀死
kill -9 [PPID]
# 然后再切换screen -r [name]
---------------------------------kafka连接-----------------------------------
# kafka官方文档
# https://kafka-python.readthedocs.io/en/master/apidoc/KafkaConsumer.html

from kafka import KafkaConsumer

# 第一个参数topic是Kafka数据写入操作的基本单元，一个topic包含多个partition
# bootstrap_servers kafka连接ip
# group_id设置组名称(自己取一个名字)
# enable_auto_commit 自动提交 False为关闭，默认是True，每5s提交一次
# auto_offset_reset 用于OffsetOutOfRange错误上重置偏移量的策略 参数有2个：earliest(读取最早可以读的消息)，latest(读取最新的消息，默认)
# 创建一个消费者consumer
consumer1 = KafkaConsumer('saas_log',
                          bootstrap_servers=[ip],
                          group_id=group_id,
                          enable_auto_commit=False,
                          auto_offset_reset='earliest')
# 一次获取100条数据，poll()默认一次500条
consumer1 = consumer1.poll(100)
for message in consumer1:
    print('当前消息的分区' + message.partition)
    print('当前消息的topic' + message.topic)
    print('当前消息的偏移量' + message.offset)
    print('当前消息的key' + message.key)
    print('当前消息内容' + message.value)
    print('当前消息偏移量' + message.offset)
    value = message.value
    # 下面就根据业务写函数，解析value的有用数据
    def function():
        pass
    # 消费完数据后，提交offset
    def commit(offset_id):
        consumer1.commit(offset=offset_id)

# 如果想从指定分区的偏移量开始消费数据，连接的时候不能加topic和group_id
consumer2 = KafkaConsumer(bootstrap_servers=[ip],
                          enable_auto_commit=False,
                          auto_offset_reset='earliest')
# 设置topic和分区
partition = TopicPartition('saas-log', 0)
# 获取partition的最近可用offset
print(consumer2.end_offsets([partition]))
# 注册
consumer2.assign([partition])
# 获取指定分区和指定offset的消息
consumer2.seek(partition, 10673962062)
# 从指定offset开始获取消息
for message in consumer2:
    print('当前消息的分区' + message.partition)
    print('当前消息的topic' + message.topic)
    print('当前消息的偏移量' + message.offset)
    print('当前消息的key' + message.key)
    print('当前消息内容' + message.value)


# 冒泡排序法
import datetime
import os

lis = [56, 3, 41, 53, 1, 45, 661, 2, 45, 1, 2, 3, 51, 2]


def sortport():
    for i in range(len(lis) - 1):
        for j in range(len(lis) - i - 1):
            if lis[j] > lis[j + 1]:
                lis[j], lis[j + 1] = lis[j + 1], lis[j]
    return lis


# 计算x的n次方
def power(x, n):
    s = 1
    while n > 0:
        n = n - 1
        s = s * x
    return s


# 计算a*a + b*b + c*c
def calc(*numbers):
    sums = 0
    for n in numbers:
        sums = sums + n * n
    return sums


# print(calc(1, 2, 3))


# 计算阶乘n!
# 方法一
def fac():
    num = int(input('请输入一个数字：'))
    factorial = 1

    # 查看数字是负数，0或正数
    if num < 0:
        print('抱歉，负数没有阶乘')
    elif num == 0:
        print('0 的阶乘为1')
    else:
        for i in range(1, num + 1):
            factorial = factorial * i
        print('%d的阶乘为%d' % (num, factorial))


# 方法二
def factorial(n):
    result = n
    for i in range(1, n):
        result *= i
    return result


# 方法三
def fact(n):
    if n == 1:
        return 1
    return n * fact(n - 1)


# 列出当前目录下所有文件和目录名
file_name = [d for d in os.listdir('.')]

# 把一个list中所有的字符串变成小写：
L = ['HELLO', 'World', 'IBM', 'Apple']
L_lower = [s.lower() for s in L]


# 输出某个路径下的所有文件和文件夹的路径
def print_dir():
    file_path = input('请输入一个路径：')
    if file_path == '':
        print('请输入正确的路径')
    else:
        try:
            for i in os.listdir(file_path):
                print(os.path.join(file_path, i))
        except FileNotFoundError as e:
            print('该路径没有找到')


# 输出某个路径及其子目录下的所有文件路备
def show_dir(filepath):
    for i in os.listdir(filepath):
        path = (os.path.join(filepath, i))
        print(path)
        if os.path.isdir(path):
            show_dir(path)


filepath1 = '/Users/cyf/Documents'


# 输出某个路径及其子目录下所有.html为后缀的文件
def print_dir_html(filepath):
    for i in os.listdir(filepath):
        path = os.path.join(filepath, i)
        if os.path.isdir(path):
            print_dir(path)

        if path.endswith('.html'):
            print(path)


filepath2 = '/Users/cyf/Documents'

# 把字典的键值对颠倒并产生新的字典
dict1 = {'A': 'a', 'B': 'b', 'C': 'c'}
dict2 = {y: x for x, y in dict1.items()}


# 打印九九乘法表
def multiplication_table():
    for i in range(1, 10):
        for j in range(1, i + 1):
            print('{}x{}={}\t'.format(j, i, i * j), end='')
        print()


# 将列表中的3替换为3a
list1 = ['aaa', 'bbb', 2, 3, 44, 33, 1, 2, 3, 3, 45, 3, 6]


def replace_list(list1):
    list1 = ['3a' if i == 3 else i for i in list1]
    return list1


# 合并列表并去重
list2 = [2, 3, 4, 5, 4, 5, 6, 7]
list3 = [3, 4, 5, 23, 2, 3, 4, 5, 6, 7, 8]
list4 = list(set(list2 + list3))

# 随机生成验证码的两种方式
import random
import string

# 方法一
list5 = []
for i in range(65, 91):
    list5.append(chr(i))
for j in range(97, 123):
    list5.append(chr(j))
for k in range(48, 58):
    list5.append(chr(k))
ma = random.sample(list5, 6)
ma = ''.join(ma)

# 方法二
str1 = '0123456789'
str2 = string.ascii_letters
str3 = str1 + str2
ma1 = random.sample(str3, 6)
ma1 = ''.join(ma1)

# 计算平方根
num = 10
num_sqrt = num ** 0.5

# 判断字符串是否只申数字组成
str1.isdigit()
str1.isnumeric()  # 此方法只针对unicode对象


# 判断闰年
def chaxun(year):
    year = int(year)
    if year % 400 == 0:
        print('{}是世纪闰年'.format(year))
    elif year % 4 == 0 and year % 100 != 0:
        print('{}是普通闰年'.format(year))
    else:
        print('{}不是闰年'.format(year))


# 斐波那契数列
def fibonacci_num(num):
    """
    :param num: 项数
    :return:
    """
    n1, n2 = 0, 1
    if num == n1:
        print('斐波那契数列: 0')
    elif num == n2:
        print('斐波那契数列: 0, 1')
    else:
        print('斐波那契数列: 0, 1', end='')
        count = 2
        while count < num:
            n3 = n1 + n2
            print(end=', ')
            print(n3, end='')
            n1, n2 = n2, n3
            count += 1


# 十进制转二进制, 八进制, 十六进制
def dec_conver(num, type):
    """
    :param type: 进制类型
    :param num: 十进制数
    :return:
    """
    if type == 2:
        return '二进制: {}'.format(bin(num))
    elif type == 8:
        return '八进制: {}'.format(oct(num))
    elif type == 16:
        return '十六进制: {}'.format(hex(num))
    else:
        return num


# 最大公约数
def hcf(x, y):
    while y != 0:
        temp = x % y
        x, y = y, temp
    return '最大公约数: {}'.format(x)


# 最小公倍数
def lcm(x, y):
    m = max(x, y)
    n = min(x, y)
    while m % n:
        m, n = n, m % n
    return '最小公倍数: {}'.format(x * y // n)


# 生成日历
import calendar


def cal(yy, mm):
    """
    根据输入的年月显示日历
    :param yy: 年
    :param mm: 月
    :return:
    """
    print(calendar.month(yy, mm))


# 计算每个月的天数
def cal_day(y, m):
    """
    :param y: 年
    :param m: 月
    :return:
    """
    month_range = calendar.monthrange(y, m)
    return month_range


# 获取昨天的日期
def get_yesterday():
    today = datetime.date.today()
    oneday = datetime.timedelta(days=1)
    yesterday = today - oneday
    return yesterday















