--------------------python连接hive数据库--------------------

使用impala连接

需要先安装python包
pip3 install pure-sasl
pip3 install sasl
pip3 install thrift_sasl
pip3 install impyla

from impyla import connect

def hive_sql():
    try:
        # 得到连接
        conn = connect(host='***', port=10000, auth_mechanism='PLAIN', user='root')
        # 得到句柄
        cursor = conn.cursor()
        # 执行查询
        cursor.execute('show databases')
        # 获取查询结果
        res = cursor.fetchall()
        # 打印结果信息
        print(res)
    except Exception as e:
        print(e)


---------------------requests--------------------

import requests

def re_post():
    # 1.Requests以form表单形式发送post请求
    url = 'http://httpbin.org/post'
    data = {'key1':'value1','key2':'value2'}
    r = requests.post(url,data)
    print(r)
    print(r.text)
    print(r.content)

    # 2.以json的形式提交表单
    url_json = 'http://httpbin.org/post'
    data_json = json.dumps({'key1':'value1','key2':'value2'})   #dumps：将python对象解码为json数据
    r_json = requests.post(url_json,data_json)
    print(r_json)
    print(r_json.text)
    print(r_json.content)

    # 3.以multipart的形式发送post
    url_mul = 'http://httpbin.org/post'
    files = {'file':open('E://report.txt','rb')}
    r = requests.post(url_mul,files=files)
    print(r)
    print(r.text)
    print(r.content)

时间戳和标准日期格式相互转化
import time

# 获取当前时间戳
time1 = int(time.time())
# 获取当前时间的python日期对象
time2 = time.localtime()
# 格式化时间戳(格式化的是日期对象) 年月日时分秒
time3 = time.strftime("%Y-%m-%d %H:%S:%M", time.localtime())

# 格式化日期格式的字符串
time_str = '2020-10-12'
time4 = time.strptime(time_str, '%Y-%m-%d')
time4 = time.mktime(time4)

print(time1)
print(time2)
print(time3)
print(time4)
# 1602468222
# time.struct_time(tm_year=2020, tm_mon=10, tm_mday=12, tm_hour=10, tm_min=3, tm_sec=42, tm_wday=0, tm_yday=286, tm_isdst=0)
# 2020-10-12 10:42:03
# 1602432000.0
---------------------------------linux screen的使用-------------------------
# 安装screen
sudo yum install screen
# 创建一个screen窗口
screen -S [name]
# 切换screen窗口
screen -r [name]
# 查看screen下所有窗口的id和名称
screen -ls
'''
There is a screen on:
    9208.kafka_log  (Detached)
1 Socket in /var/run/screen/S-data.
'''
# 删除一个screen窗口
screen -X -S [id] quit
# 如果当切换一个存在的screen是出现There is no screen to be resumed matching
# 先通过ps all查看后台进程，找到想要切换的screen，使用kill -9杀死
kill -9 [PPID]
# 然后再切换screen -r [name]
---------------------------------kafka连接-----------------------------------
# kafka官方文档
# https://kafka-python.readthedocs.io/en/master/apidoc/KafkaConsumer.html

from kafka import KafkaConsumer

# 第一个参数topic是Kafka数据写入操作的基本单元，一个topic包含多个partition
# bootstrap_servers kafka连接ip
# group_id设置组名称(自己取一个名字)
# enable_auto_commit 自动提交 False为关闭，默认是True，每5s提交一次
# auto_offset_reset 用于OffsetOutOfRange错误上重置偏移量的策略 参数有2个：earliest(读取最早可以读的消息)，latest(读取最新的消息，默认)
# 创建一个消费者consumer
consumer1 = KafkaConsumer('saas_log',
                          bootstrap_servers=[ip],
                          group_id=group_id,
                          enable_auto_commit=False,
                          auto_offset_reset='earliest')
# 一次获取100条数据，poll()默认一次500条
consumer1 = consumer1.poll(100)
for message in consumer1:
    print('当前消息的分区' + message.partition)
    print('当前消息的topic' + message.topic)
    print('当前消息的偏移量' + message.offset)
    print('当前消息的key' + message.key)
    print('当前消息内容' + message.value)
    print('当前消息偏移量' + message.offset)
    value = message.value
    # 下面就根据业务写函数，解析value的有用数据
    def function():
        pass
    # 消费完数据后，提交offset
    def commit(offset_id):
        consumer1.commit(offset=offset_id)

# 如果想从指定分区的偏移量开始消费数据，连接的时候不能加topic和group_id
consumer2 = KafkaConsumer(bootstrap_servers=[ip],
                          enable_auto_commit=False,
                          auto_offset_reset='earliest')
# 设置topic和分区
partition = TopicPartition('saas-log', 0)
# 获取partition的最近可用offset
print(consumer.end_offsets([partition]))
# 注册
consumer.assign([partition])
# 获取指定分区和指定offset的消息
consumer.seek(partition, 10673962062)
# 从指定offset开始获取消息
for message in consumer:
    print('当前消息的分区' + message.partition)
    print('当前消息的topic' + message.topic)
    print('当前消息的偏移量' + message.offset)
    print('当前消息的key' + message.key)
    print('当前消息内容' + message.value)
    print('当前消息偏移量' + message.offset)












